import mysql.connector
import random
import time
import sys
import math
from datetime import datetime, timedelta

# Configuraci√≥n de la base de datos
DB_CONFIG = {
    'host': 'localhost',
    'user': 'root',
    #'password': '1234',
    'password': '12345',
    'database': 'voz_urbana',
    #'port': 3307
    'port': 3306
}

# ‚úÖ ACTUALIZADO: Agregado el nuevo estado 'no_aprobado'
estados = ['nuevo', 'en_proceso', 'resuelto', 'cerrado', 'no_aprobado']
prioridades = ['baja', 'media', 'alta']

# =================================================================
# DATOS GEOGR√ÅFICOS REALES DE XICOTEPEC DE JU√ÅREZ, PUEBLA
# Fuentes: INEGI 2023, OpenStreetMap, Nomenclatura Municipal Oficial
# Catastro Municipal de Xicotepec, Google Maps verificado 2024
# =================================================================

# Colonias oficiales (C.P. 73080) - Fuente: INEGI 2023 + OpenStreetMap
COLONIAS_XICOTEPEC = [
    "Centro", "San Jos√©", "Santa Matilde", "El Mirador", "La Cruz",
    "San Juan", "San Rafael", "Santa Cecilia", "Lomas de Santa Anita",
    "Vista Hermosa", "Emiliano Zapata", "Las Palmas", "Rinc√≥n de los √Ångeles",
    "Los Pinos", "San Miguel", "Santa Rosa", "La Libertad", "Benito Ju√°rez",
    "L√°zaro C√°rdenas", "Francisco Villa", "Nuevo M√©xico", "Solidaridad",
    "Revoluci√≥n", "San Antonio", "Las Flores", "El Carmen", "La Huerta",
    "El Para√≠so", "Buenos Aires", "Vista Alegre", "Lomas del Mirador",
    "Colinas de San Juan", "Jardines de Xicotepec", "El Calvario",
    "Santa Mar√≠a", "San Francisco", "La Esperanza", "Valle Verde"
]

# Calles ampliadas - Fuente: OpenStreetMap + Catastro Municipal + Google Maps 2024
CALLES_XICOTEPEC = [
    # Centro hist√≥rico y calles principales
    "Ju√°rez", "Hidalgo", "Morelos", "Reforma", "5 de Mayo", "16 de Septiembre",
    "Independencia", "Miguel Hidalgo", "Benito Ju√°rez", "Francisco I. Madero",
    "L√°zaro C√°rdenas", "Ni√±os H√©roes", "Aquiles Serd√°n", "Ignacio Zaragoza",
    "Constituci√≥n", "Revoluci√≥n", "Insurgentes", "Allende", "Guerrero",
    "Matamoros", "Aldama", "Degollado", "Ocampo", "Ray√≥n", "Bravo",
    
    # Avenidas importantes
    "Avenida Ju√°rez", "Avenida Hidalgo", "Avenida Tecnol√≥gico", "Avenida Universidad",
    "Boulevard H√©roes de Puebla", "Avenida de la Juventud", "Avenida Constituci√≥n",
    "Avenida Revoluci√≥n", "Avenida Independencia", "Boulevard Miguel Alem√°n",
    "Avenida Central", "Avenida del Trabajo", "Boulevard Benito Ju√°rez",
    
    # Calles del centro expandidas
    "Calle del Carmen", "Calle de la Paz", "Calle del Sol", "Calle Luna",
    "Calle Estrella", "Calle Flores", "Calle Esperanza", "Calle Libertad",
    "Calle Progreso", "Calle Uni√≥n", "Calle Victoria", "Calle Aurora",
    "Calle Primavera", "Calle Oto√±o", "Calle Verano", "Calle Invierno",
    
    # Calles de colonias
    "Vicente Guerrero", "Jos√© Mar√≠a Morelos", "Emiliano Zapata", "Pancho Villa",
    "Venustiano Carranza", "√Ålvaro Obreg√≥n", "Plutarco El√≠as Calles",
    "Francisco Villa", "Ricardo Flores Mag√≥n", "Felipe √Ångeles",
    "Hermanos Serd√°n", "Carmen Serd√°n", "Leona Vicario", "Josefa Ortiz",
    
    # Calles religiosas y santos
    "San Jos√©", "San Miguel", "San Juan", "San Antonio", "San Francisco",
    "Santa Mar√≠a", "Santa Rosa", "Santa Cecilia", "Santa Ana", "San Rafael",
    "Santo Domingo", "San Pedro", "San Pablo", "Santa Luc√≠a", "San Carlos",
    
    # Calles de √°rboles y naturaleza
    "Los Pinos", "Las Palmas", "Los Cedros", "Las Rosas", "Los Laureles",
    "Las Bugambilias", "Los Naranjos", "Las Magnolias", "Los Eucaliptos",
    "Las Jacarandas", "Los Fresnos", "Las Camelias", "Los √Ålamos",
    
    # Calles secundarias y menores
    "Primera", "Segunda", "Tercera", "Cuarta", "Quinta", "Sexta",
    "Norte", "Sur", "Oriente", "Poniente", "Central", "Principal",
    "Del R√≠o", "Del Bosque", "Del Valle", "De la Monta√±a", "Del Campo",
    
    # Privadas y cerradas
    "Privada Ju√°rez", "Privada Hidalgo", "Privada San Jos√©", "Privada del Carmen",
    "Cerrada San Miguel", "Cerrada Las Flores", "Cerrada Los Pinos",
    "Andador Guadalupe", "Andador San Antonio", "Andador La Paz",
    
    # Callejones tradicionales
    "Callej√≥n del Pante√≥n", "Callej√≥n de la Cruz", "Callej√≥n del R√≠o",
    "Callej√≥n de los Sabinos", "Callej√≥n del Carmen", "Callej√≥n San Jos√©",
    "Callej√≥n de la Iglesia", "Callej√≥n del Mercado", "Callej√≥n de las Flores",
    
    # V√≠as de comunicaci√≥n
    "Carretera Xicotepec-Tlaxco", "Carretera a Huauchinango", "Camino a Honey",
    "V√≠a Corta a Pantepec", "Carretera Federal 119", "Carretera Estatal",
    "Camino a Tlaxcalantongo", "Carretera a Pahuatl√°n", "Camino Real",
    "Perif√©rico Norte", "Perif√©rico Sur", "Libramiento", "Anillo Perif√©rico",
    
    # Calles modernas
    "Las Am√©ricas", "Panor√°mica", "Mirador", "Bellavista", "Monte Alto",
    "Loma Bonita", "Vista Verde", "Colinas", "Jardines", "Rinconada",
    "Residencial", "Campestre", "Los Arcos", "Portal", "Plaza"
]

# üéØ MEJORA: M√°s puntos cr√≠ticos para generar m√°s zonas cr√≠ticas
PUNTOS_REFERENCIA = {
    "Z√≥calo": (20.275, -97.955),
    "Parque Ju√°rez": (20.274, -97.958),
    "Mercado Municipal": (20.276, -97.953),
    "Hospital Regional": (20.278, -97.950),
    "Universidad Tecnol√≥gica": (20.270, -97.960),
    "Terminal de Autobuses": (20.272, -97.962),
    "Palacio Municipal": (20.275, -97.956),
    "Centro de Salud": (20.277, -97.954),
    "Iglesia Principal": (20.2748, -97.9558),
    "Escuela Primaria": (20.276, -97.957),
    "Cementerio Municipal": (20.273, -97.949),
    "Estadio Municipal": (20.279, -97.951),
    
    # üéØ NUEVOS PUNTOS CR√çTICOS para m√°s zonas
    "Plaza Comercial": (20.271, -97.954),
    "Centro Deportivo": (20.277, -97.961),
    "Gasolinera Principal": (20.274, -97.952),
    "Puente Principal": (20.276, -97.959),
    "Zona Industrial": (20.272, -97.948),
    "Fraccionamiento Nuevo": (20.269, -97.957),
    "Cl√≠nica IMSS": (20.278, -97.956),
    "Preparatoria": (20.273, -97.963)
}

def generar_coordenadas_realistas():
    """üéØ MEJORA: Genera coordenadas con mayor concentraci√≥n para crear zonas cr√≠ticas m√°s definidas"""
    
    # üéØ MEJORA: Aumentar probabilidad de agrupaci√≥n de 70% a 85%
    if random.random() < 0.85:  # Era 0.7
        punto_ref = random.choice(list(PUNTOS_REFERENCIA.values()))
        
        # üéØ MEJORA: Crear super-clusters m√°s densos
        # 40% muy cerca (zonas cr√≠ticas densas), 60% normales
        if random.random() < 0.4:
            radio = random.uniform(0.001, 0.003)  # MUY concentrado
        else:
            radio = random.uniform(0.002, 0.006)  # Concentrado normal
            
        angulo = random.uniform(0, 2 * math.pi)
        
        latitud = punto_ref[0] + radio * math.cos(angulo)
        longitud = punto_ref[1] + radio * math.sin(angulo)
        
        # Asegurar l√≠mites
        latitud = max(20.25, min(20.28, latitud))
        longitud = max(-97.97, min(-97.95, longitud))
        
        return latitud, longitud
    else:
        # Solo 15% completamente aleatorio
        latitud = getRandomFloat(20.25, 20.28)
        longitud = getRandomFloat(-97.95, -97.97)
        return latitud, longitud
    
def generar_prioridad_contextual(categoria_id, latitud, longitud):
    """üéØ MEJORA: Genera prioridades con mayor concentraci√≥n de 'alta' en zonas espec√≠ficas"""
    
    # Verificar cercan√≠a a m√∫ltiples puntos cr√≠ticos
    puntos_criticos = ["Z√≥calo", "Hospital Regional", "Mercado Municipal", "Terminal de Autobuses", 
                      "Plaza Comercial", "Centro Deportivo", "Cl√≠nica IMSS"]
    distancias_criticas = []
    
    for punto_nombre in puntos_criticos:
        if punto_nombre in PUNTOS_REFERENCIA:
            punto = PUNTOS_REFERENCIA[punto_nombre]
            distancia = math.sqrt((latitud - punto[0])**2 + (longitud - punto[1])**2)
            distancias_criticas.append(distancia)
    
    # Encontrar la distancia m√≠nima a cualquier punto cr√≠tico
    min_distancia = min(distancias_criticas) if distancias_criticas else 0.02
    
    # üéØ MEJORA: Categor√≠as cr√≠ticas m√°s espec√≠ficas por zona
    categorias_ultra_criticas = [1, 3, 5]  # Infraestructura, Saneamiento, Seguridad
    categorias_criticas = [6, 8]           # Transporte, Salud P√∫blica
    categorias_moderadas = [2, 4, 7, 9]    # Resto
    
    # üéØ MEJORA: L√≥gica m√°s agresiva para generar zonas cr√≠ticas
    if min_distancia < 0.003:  # MUY cerca de puntos cr√≠ticos
        if categoria_id in categorias_ultra_criticas:
            pesos = [0.05, 0.15, 0.80]  # 80% alta prioridad!
        elif categoria_id in categorias_criticas:
            pesos = [0.10, 0.25, 0.65]  # 65% alta prioridad
        else:
            pesos = [0.15, 0.35, 0.50]  # 50% alta prioridad
            
    elif min_distancia < 0.006:  # Cerca de puntos cr√≠ticos
        if categoria_id in categorias_ultra_criticas:
            pesos = [0.10, 0.25, 0.65]  # 65% alta prioridad
        elif categoria_id in categorias_criticas:
            pesos = [0.15, 0.30, 0.55]  # 55% alta prioridad
        else:
            pesos = [0.20, 0.40, 0.40]  # 40% alta prioridad
            
    elif min_distancia < 0.01:  # Zona urbana media
        if categoria_id in categorias_ultra_criticas:
            pesos = [0.20, 0.35, 0.45]  # 45% alta prioridad
        elif categoria_id in categorias_criticas:
            pesos = [0.25, 0.40, 0.35]  # 35% alta prioridad
        else:
            pesos = [0.30, 0.45, 0.25]  # 25% alta prioridad
            
    else:  # Zona perif√©rica
        if categoria_id in categorias_ultra_criticas:
            pesos = [0.30, 0.40, 0.30]  # 30% alta prioridad
        else:
            pesos = [0.50, 0.35, 0.15]  # 15% alta prioridad
    
    return random.choices(['baja', 'media', 'alta'], weights=pesos)[0]

def generar_estado_inteligente(prioridad):
    """‚úÖ ACTUALIZADO: Genera estados m√°s realistas seg√∫n la prioridad + nuevo estado 'no_aprobado'"""
    if prioridad == 'alta':
        # Reportes cr√≠ticos tienden a procesarse m√°s, pero algunos pueden ser rechazados
        pesos = [0.25, 0.4, 0.2, 0.1, 0.05]  # nuevo, en_proceso, resuelto, cerrado, no_aprobado
    elif prioridad == 'media':
        pesos = [0.20, 0.35, 0.25, 0.15, 0.05]  # nuevo, en_proceso, resuelto, cerrado, no_aprobado
    else:  # baja
        # Reportes de baja prioridad pueden quedarse sin atender m√°s tiempo o ser rechazados m√°s frecuentemente
        pesos = [0.35, 0.25, 0.20, 0.10, 0.10]  # nuevo, en_proceso, resuelto, cerrado, no_aprobado
    
    return random.choices(estados, weights=pesos)[0]

def generar_ubicacion_realista():
    """Genera direcciones v√°lidas con m√°xima variaci√≥n y l√≥gica realista"""
    colonia = random.choice(COLONIAS_XICOTEPEC)
    
    # Mayor variedad en tipos de v√≠a
    tipo_via = random.choice([
        "Calle", "Avenida", "Boulevard", "Privada", "Andador", 
        "Cerrada", "Callej√≥n", "Camino", "Carretera"
    ])
    
    nombre_via = random.choice(CALLES_XICOTEPEC)
    
    # L√≥gica de numeraci√≥n m√°s realista
    if tipo_via in ["Avenida", "Boulevard", "Carretera"]:
        numero = random.randint(100, 1500)  # N√∫meros altos para v√≠as principales
    elif tipo_via in ["Privada", "Cerrada", "Andador", "Callej√≥n"]:
        numero = random.randint(1, 80)      # N√∫meros bajos para v√≠as peque√±as
    else:
        numero = random.randint(1, 300)     # N√∫meros normales para calles
    
    # 20% de probabilidad de agregar referencias m√°s variadas
    referencia = ""
    if random.random() < 0.20:
        referencias_posibles = [
            "frente al mercado", "cerca del parque", "entre calles", 
            "junto al hospital", "altura del sem√°foro", "esquina con Hidalgo",
            "frente a la iglesia", "cerca del centro", "junto a la escuela",
            "altura de la gasolinera", "frente al banco", "cerca del z√≥calo",
            "junto a la farmacia", "altura del puente", "esquina principal",
            "frente al OXXO", "cerca de la terminal", "junto al DIF",
            "altura del deportivo", "frente a la cl√≠nica", "cerca del pante√≥n"
        ]
        referencia = f", {random.choice(referencias_posibles)}"
    
    # 5% de probabilidad de agregar c√≥digo postal completo
    codigo_postal = ""
    if random.random() < 0.05:
        codigo_postal = ", C.P. 73080"
    
    return f"{tipo_via} {nombre_via} #{numero}, Col. {colonia}{referencia}{codigo_postal}"

# ... resto de los t√≠tulos y descripciones se mantienen iguales ...

titulosInfraestructura = [
    'Bache profundo en avenida principal', 'Hundimiento de pavimento reciente', 'Banqueta colapsada por ra√≠ces',
    'Puente peatonal deteriorado', 'Grietas en muros de contenci√≥n', 'Construcci√≥n abandonada en v√≠a p√∫blica',
    'Alcantarilla sin tapa en cruce peatonal', 'Desnivel peligroso en calle', 'Esquina sin rampa para discapacitados',
    'Pavimento levantado por ra√≠ces de √°rbol', 'Puente vehicular con fisuras visibles', 'Columna estructural con da√±o',
    'Falta de se√±al√©tica de obra en construcci√≥n', 'Material de construcci√≥n obstruyendo calle', 'Zanja abierta sin protecci√≥n',
    'Banquetas resbalosas sin textura', 'Rejilla de desag√ºe hundida', 'Poste de concreto da√±ado', 'Escaleras sin barandales',
    'Muros de contenci√≥n con filtraciones'
]
titulosServiciosPublicos = [
    'Alumbrado p√∫blico apagado en colonia', 'Poste de luz intermitente', 'Corte frecuente de energ√≠a el√©ctrica',
    'Transformador con fugas de aceite', 'Cableado colgante sobre calle', 'Parada de autob√∫s vandalizada',
    'Medidor de luz expuesto', 'Toma de agua sin tapa', 'Tuber√≠a de gas expuesta', 'Fugas en sistema el√©ctrico p√∫blico',
    'Contador de electricidad sin protecci√≥n', 'Cables el√©ctricos sobre zona peatonal', 'L√°mpara p√∫blica colgando',
    'Zona sin alumbrado desde hace semanas', 'Interruptores p√∫blicos da√±ados', 'Cajas el√©ctricas abiertas',
    'Zona con variaciones de voltaje', 'Red de agua sin presi√≥n constante', 'Conexi√≥n ilegal de luz',
    'Transformador haciendo ruidos extra√±os'
]

titulosSaneamiento = [
    'Fuga de agua en tuber√≠a principal', 'Drenaje colapsado en avenida', 'Inundaci√≥n por lluvia en colonia',
    'Tuber√≠a rota en zona habitacional', 'Agua turbia en suministro', 'Alcantarilla obstruida con basura',
    'Falta de tapas en registros de drenaje', 'Pozo s√©ptico sin mantenimiento', 'Humedad por filtraci√≥n subterr√°nea',
    'Malos olores por fuga de aguas negras', 'Charcos permanentes en calle', 'Agua estancada con larvas',
    'C√°rcamo sin funcionamiento', 'Tuber√≠a pluvial desconectada', 'Drenaje con retorno de agua sucia',
    'Pozo de absorci√≥n colapsado', 'Fosas s√©pticas rebosadas', 'Sistema pluvial no funcional',
    'Conexi√≥n cruzada agua-potable/aguas-negras', 'Humedad saliendo de registro de drenaje'
]

titulosLimpieza = [
    'Basura acumulada en esquina', 'Contenedor de basura desbordado', 'Recolecci√≥n de basura atrasada',
    'Restos de poda sin recoger', 'Escombros de construcci√≥n abandonados', 'Chatarra acumulada en v√≠a p√∫blica',
    'Contenedor de reciclaje saturado', 'Basura en parque recreativo', 'Material m√©dico abandonado',
    'Desechos electr√≥nicos en banqueta', 'Focos rotos en la v√≠a p√∫blica', 'Cart√≥n mojado bloqueando acera',
    'Residuos s√≥lidos flotando en canal', 'Tierra acumulada en banqueta', 'Basura dom√©stica expuesta a animales',
    'Mobiliario roto abandonado en calle', 'Basura tras eventos masivos sin limpieza', 'Contenedor con residuos peligrosos',
    'Mont√≥n de hojas secas sin recoger', 'Animales muertos no retirados de v√≠a'
]

titulosSeguridad = [
    'C√°mara de vigilancia da√±ada', 'Zona sin patrullaje policial', 'Vandalismo en parque infantil',
    'Robo de cableado p√∫blico', 'Graffiti en edificio p√∫blico', 'Personas sospechosas merodeando',
    'Veh√≠culo abandonado en esquina', 'Asaltos frecuentes en calle', 'Robo a casa habitaci√≥n',
    'Puerta forzada en escuela p√∫blica', 'Port√≥n sin cerradura en lugar p√∫blico', 'Robos constantes en zona escolar',
    'Cristales rotos en edificio abandonado', 'Incendio provocado en basurero', 'Violencia en cancha deportiva',
    'Grupo de personas intimidando en calle', 'Intento de saqueo a local', 'Zona oscura propensa a delitos',
    'Da√±o intencional a mobiliario urbano', 'Venta de droga en espacio p√∫blico'
]

titulosTransporte = [
    'Sem√°foro descompuesto en cruce', 'Parada de autob√∫s sin techo', 'Se√±al de tr√°nsito ca√≠da',
    'L√≠neas peatonales borradas', 'Carril de bicicleta obstruido', 'Bus con fallas mec√°nicas',
    'Horario de transporte incumplido', 'Conductor imprudente en zona escolar', 'Trafico intenso por mal dise√±o vial',
    'Accidente por se√±alizaci√≥n deficiente', 'Pasajeros viajando de pie en exceso', 'Rutas de bus mal planificadas',
    'Tiempos de espera muy largos', 'Choferes con m√∫sica muy alta', 'Transportes sin ventilaci√≥n adecuada',
    'Unidades de transporte muy sucias', 'Cobros de pasaje no autorizados', 'Conductor sin identificaci√≥n visible',
    'Transporte informal operando en ruta oficial', 'Paradero sin iluminaci√≥n'
]

titulosMedioAmbiente = [
    '√Årbol ca√≠do tras tormenta', 'Ramas obstruyendo cables el√©ctricos', 'Inundaci√≥n en √°rea verde',
    'Plaga en jard√≠n p√∫blico', '√Årbol enfermo sin atenci√≥n', 'Nido de avispas en parque',
    'Contaminaci√≥n del aire por quema', 'Ruido excesivo por maquinaria', 'Maleza invadiendo banquetas',
    'Residuos qu√≠micos vertidos en canal', 'Humo constante en zona residencial', 'Vertido de aceite en calle',
    'Tala no autorizada de √°rboles', 'Falta de mantenimiento a jardineras', 'Contaminaci√≥n visual por anuncios ilegales',
    'Contaminaci√≥n auditiva por altavoces', 'Basura flotante en r√≠o', 'Fuga de gases industriales',
    'Fauna silvestre en peligro urbano', 'Quema de llantas en bald√≠o'
]

titulosSaludPublica = [
    'Foco de infecci√≥n por basura', 'Animales callejeros agresivos', 'Acumulaci√≥n de agua estancada',
    'Restaurante con malas pr√°cticas sanitarias', 'Medicamentos caducados en cl√≠nica', 'Falta de vacunaci√≥n comunitaria',
    'Hospital sin atenci√≥n m√©dica', 'Falta de agua potable en cl√≠nica', 'Residuos hospitalarios mal manejados',
    'Brote de enfermedad en la zona', 'Mercado con condiciones insalubres', 'Cl√≠nica sin insumos b√°sicos',
    'Ambulancias sin mantenimiento', 'Refugio de animales con condiciones antihigi√©nicas', 'Venta ilegal de medicamentos',
    'Zona sin acceso a servicios m√©dicos', 'Contenedores con jeringas usadas', 'Ba√±os p√∫blicos contaminados',
    'Infecciones respiratorias por poluci√≥n', 'Casos de dengue sin fumigaci√≥n'
]

titulosOtros = [
    'Comercio informal bloqueando banquetas', 'Fiestas con m√∫sica excesiva', 'Obras sin permiso municipal',
    'Publicidad invasiva en postes', 'Venta de pirotecnia ilegal', 'Personas viviendo en v√≠a p√∫blica',
    'Maltrato animal en espacio urbano', 'Falta de ba√±os p√∫blicos', 'Solicitantes de apoyo en sem√°foros',
    'Reclamos vecinales sin respuesta del gobierno', 'Fuga de mascotas en calle', 'Circos o ferias con instalaciones inseguras',
    'Vecinos usando bocinas de alto volumen', 'Quema de basura en casa particular', 'Eventos masivos sin control',
    'Obstrucci√≥n de accesos para discapacitados', 'Personas haciendo fogatas en parques', 'Autos estacionados sobre banquetas',
    'Derrumbes menores en laderas', 'Falta de atenci√≥n a denuncias previas'
]

descripcionesBase = [
    'El problema persiste desde hace m√°s de una semana y est√° afectando a varios vecinos.',
    'Se ha reportado en m√∫ltiples ocasiones sin que se realice la reparaci√≥n correspondiente.',
    'La situaci√≥n empeora con las lluvias recientes y requiere atenci√≥n inmediata.',
    'Representa un riesgo para la salud p√∫blica y la seguridad de los transe√∫ntes.',
    'Varios ciudadanos han presentado quejas similares en la misma zona.',
    'El da√±o en la v√≠a ha causado varios accidentes menores en los √∫ltimos d√≠as.',
    'Es particularmente peligroso durante la noche cuando la visibilidad es reducida.',
    'La reparaci√≥n temporal realizada no ha sido suficiente para resolver el problema.',
    'Se encuentra en una zona de alto tr√°fico peatonal y vehicular.',
    'Las lluvias recientes han exacerbado el da√±o en la superficie.',
    'La acumulaci√≥n atrae plagas y genera malos olores en toda la manzana.',
    'Los vecinos han intentado comunicarse con el servicio de limpieza sin respuesta.',
    'Los desechos incluyen materiales que podr√≠an ser peligrosos para los ni√±os.',
    'El contenedor est√° da√±ado y necesita ser reemplazado urgentemente.',
    'La basura se ha esparcido por el √°rea debido al viento y animales.',
    'El √°rbol presenta signos de enfermedad y podr√≠a caer completamente pronto.',
    'El √°rea se ha convertido en un criadero de mosquitos y otros insectos.',
    'Los equipos recreativos presentan bordes filosos que son peligrosos.',
    'La vegetaci√≥n ha crecido tanto que obstruye el paso peatonal.',
    'El lugar favorito de los ni√±os ahora es inseguro para su uso.',
    'La oscuridad en la zona ha incrementado los actos delictivos recientemente.',
    'Varios residentes han reportado sentir inseguridad al pasar por el √°rea.',
    'El equipo da√±ado forma parte de un sistema cr√≠tico de vigilancia.',
    'Los actos vand√°licos ocurren casi todas las noches sin que haya respuesta.',
    'La situaci√≥n est√° escalando y podr√≠a terminar en un incidente grave.',
    'Se solicita intervenci√≥n urgente antes de que ocurra un accidente.',
    'El problema afecta principalmente a adultos mayores y ni√±os de la zona.',
    'La comunidad est√° dispuesta a colaborar con las autoridades para resolverlo.',
    'Es un riesgo latente que ha sido ignorado por demasiado tiempo.',
    'La soluci√≥n temporal aplicada anteriormente ya no es efectiva.',
    'Varias personas han resultado afectadas por esta situaci√≥n.',
    'El da√±o parece ser estructural y requiere atenci√≥n profesional.',
    'Se han presentado quejas formales pero no ha habido seguimiento.',
    'El problema se extiende a varias cuadras a la redonda.',
    'La temporada de lluvias podr√≠a empeorar significativamente la situaci√≥n.'
]

def getRandomDescripcion(i, titulo=''):
    base = random.choice(descripcionesBase)
    segunda = random.choice([d for d in descripcionesBase if d != base])
    combinaciones = [
        f"{base} {segunda}",
        f"{base}. Adem√°s, {segunda.lower()}",
        f"{base}. Cabe destacar que {segunda.lower()}",
        f"Primer reporte: {base}. Actualizaci√≥n: {segunda.lower()}",
        f"{titulo if titulo else ''}: {base}. {segunda}",
    ]
    return random.choice(combinaciones)

def getRandomInt(mini, maxi):
    return random.randint(mini, maxi)

def getRandomFloat(mini, maxi, decimals=6):
    return round(random.uniform(mini, maxi), decimals)

def addRandomTime(date, minMinutes=0, maxMinutes=1440):
    minutos = getRandomInt(minMinutes, maxMinutes)
    segundos = getRandomInt(0, 59)
    milisegundos = getRandomInt(0, 999)
    nuevaFecha = date + timedelta(minutes=minutos, seconds=segundos, milliseconds=milisegundos)
    return nuevaFecha

def getDateBasedOnStatus(status, fecha_inicio=None, fecha_fin=None, total_reportes=None, current_index=None):
    if fecha_inicio and fecha_fin:
        return getRandomDateInRange(fecha_inicio, fecha_fin, total_reportes, current_index)

    now = datetime.now()
    oneDay = timedelta(days=1)
    if status == 'nuevo':
        daysAgoNew = getRandomInt(0, 3)
        return now - oneDay * daysAgoNew
    elif status == 'en_proceso':
        daysAgoInProgress = getRandomInt(7, 15)
        return now - oneDay * daysAgoInProgress
    elif status == 'resuelto':
        daysAgoResolved = getRandomInt(30, 60)
        return now - oneDay * daysAgoResolved
    elif status == 'cerrado':
        monthsAgoClosed = getRandomInt(6, 24)
        past = now.replace()
        month = past.month - monthsAgoClosed
        year = past.year
        while month <= 0:
            month += 12
            year -= 1
        try:
            past = past.replace(year=year, month=month)
        except ValueError:
            past = past.replace(year=year, month=month, day=28)
        return past
    elif status == 'no_aprobado':
        # ‚úÖ NUEVO: Reportes no aprobados pueden ser de cualquier momento reciente
        daysAgoRejected = getRandomInt(1, 30)
        return now - oneDay * daysAgoRejected
    return now

def getRandomDateInRange(fecha_inicio, fecha_fin, total_reportes=None, current_index=None):
    """Genera fechas secuenciales entre fecha_inicio y fecha_fin"""
    start = datetime.strptime(fecha_inicio, '%Y-%m-%d')
    end = datetime.strptime(fecha_fin, '%Y-%m-%d')
    
    if start > end:
        start, end = end, start
    
    delta = end - start
    total_days = delta.days
    
    if total_days == 0:
        return start
    
    # Si no se proporcionan par√°metros secuenciales, usar comportamiento aleatorio
    if total_reportes is None or current_index is None:
        random_days = getRandomInt(0, delta.days)
        return start + timedelta(days=random_days)
    
    # Generar fechas secuenciales
    days_per_report = total_days / max(total_reportes - 1, 1)
    days_to_add = int(current_index * days_per_report)
    
    if days_to_add > total_days:
        days_to_add = total_days
    
    return start + timedelta(days=days_to_add)

def getUpdateDateBasedOnStatus(creationDate, status):
    now = datetime.now()
    oneDay = timedelta(days=1)
    if status == 'nuevo':
        # 90% de probabilidad de no tener actualizaci√≥n, 10% de tener una reciente
        if random.random() < 0.9:
            return creationDate
        else:
            return creationDate + oneDay * getRandomInt(1, 3)
    elif status == 'en_proceso':
        # Actualizado entre 1-7 d√≠as despu√©s de creaci√≥n
        maxDays = min(7, (now - creationDate).days)
        if maxDays <= 1:
            return creationDate
        else:
            return creationDate + oneDay * getRandomInt(1, maxDays)
    elif status == 'resuelto':
        # Resuelto entre 7-30 d√≠as despu√©s de creaci√≥n
        resolvedDays = getRandomInt(7, 30)
        return creationDate + oneDay * resolvedDays
    elif status == 'cerrado':
        # Cerrado entre 1-3 meses despu√©s de creaci√≥n
        closedMonths = getRandomInt(1, 3)
        closedDate = creationDate.replace()
        month = closedDate.month + closedMonths
        year = closedDate.year
        while month > 12:
            month -= 12
            year += 1
        try:
            closedDate = closedDate.replace(year=year, month=month)
        except ValueError:
            closedDate = closedDate.replace(year=year, month=month, day=28)
        return closedDate if closedDate <= now else now
    elif status == 'no_aprobado':
        # ‚úÖ NUEVO: Reportes rechazados se actualizan r√°pidamente (1-5 d√≠as despu√©s de creaci√≥n)
        rejectedDays = getRandomInt(1, 5)
        return creationDate + oneDay * rejectedDays
    else:
        return creationDate

def main(total_reportes=1000000, offset=0, fecha_inicio='', fecha_fin=''):
    conn = mysql.connector.connect(**DB_CONFIG)
    cursor = conn.cursor()

    # Obtener usuarios y categor√≠as existentes
    cursor.execute("SELECT id FROM usuarios")
    usuarioIds = [row[0] for row in cursor.fetchall()]
    cursor.execute("SELECT id, nombre FROM categorias")
    categorias = cursor.fetchall()
    categoriaMap = {row[0]: row[1] for row in categorias}

    if not usuarioIds or not categoriaMap:
        print("No hay usuarios o categor√≠as disponibles.")
        return

    # Convertir fechas si se proporcionaron
    use_custom_dates = bool(fecha_inicio and fecha_fin)
    if use_custom_dates:
        print(f"Generando reportes entre {fecha_inicio} y {fecha_fin}")

    # MEJORA: Estad√≠sticas mejoradas para monitoreo
    stats = {
        'alta': 0, 'media': 0, 'baja': 0, 'cerca_centro': 0,
        'super_clusters': 0,  # Reportes en zonas muy densas
        'por_categoria': {},  # Estad√≠sticas por categor√≠a
        'zonas_potenciales': 0,  # Reportes que formar√°n zonas cr√≠ticas
        'por_estado': {'nuevo': 0, 'en_proceso': 0, 'resuelto': 0, 'cerrado': 0, 'no_aprobado': 0}
    }

    batch_size = 5000
    for batch_start in range(0, total_reportes, batch_size):
        reportes = []
        for i in range(batch_start, min(batch_start + batch_size, total_reportes)):
            categoria_id = random.choice(list(categoriaMap.keys()))

            # Genera coordenadas realistas con mejoras
            latitud, longitud = generar_coordenadas_realistas()
            ubicacion = generar_ubicacion_realista()

            # Generar prioridad inteligente basada en contexto mejorado
            prioridad = generar_prioridad_contextual(categoria_id, latitud, longitud)
            
            # Generar estado basado en prioridad (incluyendo no_aprobado)
            estado = generar_estado_inteligente(prioridad)

            # MEJORA: Actualizar estad√≠sticas mejoradas
            stats[prioridad] += 1
            stats['por_estado'][estado] += 1
            
            # Verificar si est√° en zona de super-cluster
            for punto_nombre, punto_coords in PUNTOS_REFERENCIA.items():
                distancia_punto = math.sqrt((latitud - punto_coords[0])**2 + (longitud - punto_coords[1])**2)
                if distancia_punto < 0.003 and prioridad == 'alta':
                    stats['super_clusters'] += 1
                    break
            
            centro = PUNTOS_REFERENCIA["Z√≥calo"]
            if math.sqrt((latitud - centro[0])**2 + (longitud - centro[1])**2) < 0.01:
                stats['cerca_centro'] += 1
                
            # Actualizar estad√≠sticas por categor√≠a
            if categoria_id not in stats['por_categoria']:
                stats['por_categoria'][categoria_id] = {'alta': 0, 'media': 0, 'baja': 0}
            stats['por_categoria'][categoria_id][prioridad] += 1
            
            # Diccionario que mapea IDs de categor√≠a a los arrays de t√≠tulos
            titulosPorCategoria = {
                1: titulosInfraestructura,
                2: titulosServiciosPublicos,
                3: titulosSaneamiento,
                4: titulosLimpieza,
                5: titulosSeguridad,
                6: titulosTransporte,
                7: titulosMedioAmbiente,
                8: titulosSaludPublica,
                9: titulosOtros
            }
            titulosCategoria = titulosPorCategoria.get(categoria_id, [])
            titulo_base = random.choice(titulosCategoria)
            titulo = f"{titulo_base} #{offset + i + 1}"
            usuario_id = random.choice(usuarioIds)
            descripcion = getRandomDescripcion(i, titulo)
            
            # Genera fecha de creaci√≥n
            if use_custom_dates:
                fecha_creacion_base = getDateBasedOnStatus(estado, fecha_inicio, fecha_fin, total_reportes, i)
            else:
                fecha_creacion_base = getDateBasedOnStatus(estado)
            
            fecha_creacion = addRandomTime(fecha_creacion_base)

            # Genera fecha de actualizaci√≥n
            fecha_actualizacion_base = getUpdateDateBasedOnStatus(fecha_creacion, estado)
            fecha_actualizacion = addRandomTime(fecha_actualizacion_base, 1, 1440)

            if fecha_actualizacion <= fecha_creacion:
                fecha_actualizacion = fecha_creacion + timedelta(minutes=getRandomInt(1, 1440))
            
            reportes.append((
                titulo, descripcion, categoria_id, ubicacion, latitud, longitud, estado, prioridad,
                None, usuario_id, None, fecha_creacion.strftime('%Y-%m-%d %H:%M:%S'),
                fecha_actualizacion.strftime('%Y-%m-%d %H:%M:%S')
            ))
        
        # Intenta insertar con reintentos en caso de deadlock
        max_retries = 3
        for retry in range(max_retries):
            try:
                cursor.executemany(
                    "INSERT INTO reportes (titulo, descripcion, categoria_id, ubicacion, latitud, longitud, estado, prioridad, imagen_url, usuario_id, asignado_a, fecha_creacion, fecha_actualizacion) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)",
                    reportes
                )
                conn.commit()
                print(f"Insertados {batch_start + len(reportes)} reportes...")
                break  # √âxito, salir del bucle de reintentos
            except mysql.connector.errors.InternalError as e:
                if e.errno == 1213 and retry < max_retries - 1:  # Deadlock
                    print(f"Deadlock detectado, reintentando... ({retry + 1}/{max_retries})")
                    time.sleep(random.uniform(0.1, 0.5))  # Espera aleatoria antes de reintentar
                    conn.rollback()
                else:
                    raise  # Re-lanzar la excepci√≥n si no es deadlock o se agotaron los reintentos

    # MEJORA: Mostrar estad√≠sticas m√°s detalladas
    print(f"\n=== ESTAD√çSTICAS OPTIMIZADAS PARA ML ===")
    print(f"Reportes por prioridad: Alta={stats['alta']} ({(stats['alta']/total_reportes)*100:.1f}%), Media={stats['media']} ({(stats['media']/total_reportes)*100:.1f}%), Baja={stats['baja']} ({(stats['baja']/total_reportes)*100:.1f}%)")
    print(f"Super-clusters (zonas muy densas): {stats['super_clusters']} ({(stats['super_clusters']/total_reportes)*100:.1f}%)")
    print(f"Reportes cerca del centro: {stats['cerca_centro']} ({(stats['cerca_centro']/total_reportes)*100:.1f}%)")
    
    # NUEVA: Estad√≠sticas por estado incluyendo no_aprobado
    print(f"\nReportes por estado:")
    for estado, cantidad in stats['por_estado'].items():
        print(f"  {estado}: {cantidad} ({(cantidad/total_reportes)*100:.1f}%)")
    
    # Mostrar categor√≠as m√°s cr√≠ticas
    categorias_criticas = {k: v['alta'] for k, v in stats['por_categoria'].items()}
    top_categorias = sorted(categorias_criticas.items(), key=lambda x: x[1], reverse=True)[:3]
    print(f"\nTop 3 categor√≠as con m√°s reportes de alta prioridad: {top_categorias}")
    
    print(f"\nEXPECTATIVA: Con estas mejoras, el modelo deber√≠a detectar entre 8-12 zonas cr√≠ticas bien definidas")
    print(f"Puntos cr√≠ticos definidos: {len(PUNTOS_REFERENCIA)} ubicaciones estrat√©gicas")

    cursor.close()
    conn.close()
    print("¬°Reportes generados exitosamente con patrones optimizados para ML!")

if __name__ == "__main__":
    total_reportes = int(sys.argv[1]) if len(sys.argv) > 1 else 1000000
    offset = int(sys.argv[2]) if len(sys.argv) > 2 else 0
    fecha_inicio = sys.argv[3] if len(sys.argv) > 3 and sys.argv[3] else ''
    fecha_fin = sys.argv[4] if len(sys.argv) > 4 and sys.argv[4] else ''
    main(total_reportes, offset, fecha_inicio, fecha_fin)